(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> userprofile() takes no arguments (1 given)"
p3
sS'layer'
p4
S'/home/ramarohit/web2py/applications/Cooking_Recipies/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n@auth.requires_login()\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Ready to Taste")\n    message=T(\'Welcome to the Food World!!\')\n    if not request.vars.page:\n        redirect(URL(vars={\'page\' : 1}))\n    else :\n        page=int(request.vars.page)\n        start=(page-1)*10\n        end=page*10\n        posts=db(db.Reciepe_post).select(orderby=~db.Reciepe_post.created_on,limitby=(start,end))\n\n    return locals()\ndef index1():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Ready to Taste")\n    message=T(\'Welcome to the Food World!!\')\n    if not request.vars.page:\n        redirect(URL(vars={\'page\' : 1}))\n    else :\n        page=int(request.vars.page)\n        start=(page-1)*10\n        end=page*10\n        posts=db(db.Reciepe_post).select(orderby=~db.Reciepe_post.votes,limitby=(start,end))\n\n    return locals()\n@auth.requires_login()\ndef Details():\n    post = db.Reciepe_post(request.args(0,cast=int))\n    return locals()\n@auth.requires_login()\ndef userlist():\n    posts=db(db.auth_user).select()\n    return locals()\n\ndef userprofile():\n    post = db.auth_user(request.args(0,cast=int))\n    return locals()\n\ndef useruploads():\n    ide=request.args(0,cast=int)\n    name=db.auth_user(ide).first_name\n    posts=db(db.Reciepe_post.iden==ide).select(orderby=db.Reciepe_post.votes)\n    \n    return locals()\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\ndef edit_post():\n    id=request.args(0,cast=int)\n    form=SQLFORM(db.Reciepe_post, id).process(next=\'Details/[id]\')\n    return locals()\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n@auth.requires_login()\n\ndef upload_your_recipie():\n    db.Reciepe_post.Name.default=auth.user.first_name\n    db.Reciepe_post.Name.writable=False\n    db.Reciepe_post.Name.readable=False\n    db.Reciepe_post.iden.default=auth.user.id\n    db.Reciepe_post.iden.writable=False\n    db.Reciepe_post.iden.readable=False\n    form=SQLFORM(db.Reciepe_post).process()\n    return locals()\n@auth.requires_login()\n\ndef My_Recipies():\n    rows=db(db.Reciepe_post.iden==auth.user.id).select()\n    if not request.vars.page:\n        redirect(URL(vars={\'page\' : 1}))\n    else :\n        page=int(request.vars.page)\n        start=(page-1)*10\n        end=page*10\n        posts=db(db.Reciepe_post.iden==auth.user.id).select(orderby=~db.Reciepe_post.created_on,limitby=(start,end))\n    return locals()\n@auth.requires_login()\ndef test():\n    query=((db.Reciepe_post.iden==auth.user.id))\n    rows=SQLFORM.grid(query=query)\n    return locals()\n@auth.requires_login()\ndef viewprofile():\n    return userprofile(args=auth.user.id)\n\ndef posts():\n    if not request.vars.page:\n        redirect(URL(vars={\'page\' : 1}))\n    else :\n        page=int(request.vars.page)\n        start=(page-1)*10\n        end=page*10\n        posts=db(db.Reciepe_post).select(orderby=~db.Reciepe_post.created_on,limitby=(start,end))\n        return dict(posts=posts)\n\ndef likes():\n    vars = request.post_vars\n    if vars and auth.user:\n        id = vars.id\n        direction = +1 if vars.direction == \'up\' else -1\n        post = db.Reciepe_post(id)\n        if post:\n            vote = db.vote(post=id,created_by=auth.user.id)\n            if not vote:\n                if direction==1 :\n                    post.update_record(votes=post.votes+direction)\n                    db.vote.insert(post=id,score=direction)\n                else:\n                    pass\n            elif vote.score!=direction:\n                post.update_record(votes=post.votes+direction)\n                vote.update_record(score=direction)\n            else:\n                pass\n    """\n    if vars:\n        id=vars.id\n        direction=+1 if vars.direction==\'up\' else -1\n        post=db.Reciepe_post(id)\n        if post:\n            post.update_record(votes=post.votes+direction)\n    """\n    return str(post.votes)\n@auth.requires_membership("admin")\ndef admini():\n    dict(message=T(\'Welcome Admin!!\'))\n    posts=SQLFORM.smartgrid(db.auth_user, linked_tables=[\'Reciepe_post\'])\n    return locals()\n\nresponse._vars=response._caller(viewprofile)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/ramarohit/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/ramarohit/web2py/applications/Cooking_Recipies/controllers/default.py", line 185, in <module>\n  File "/home/ramarohit/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/ramarohit/web2py/gluon/tools.py", line 4236, in f\n    return action(*a, **b)\n  File "/home/ramarohit/web2py/applications/Cooking_Recipies/controllers/default.py", line 139, in viewprofile\n    return userprofile(args=auth.user.id)\nTypeError: userprofile() takes no arguments (1 given)\n'
p11
s.